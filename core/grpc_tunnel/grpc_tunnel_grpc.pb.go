// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: core/grpc_tunnel/grpc_tunnel.proto

package grpc_tunnel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCTunnelClient is the client API for GRPCTunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCTunnelClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (GRPCTunnel_ConnectClient, error)
}

type gRPCTunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCTunnelClient(cc grpc.ClientConnInterface) GRPCTunnelClient {
	return &gRPCTunnelClient{cc}
}

func (c *gRPCTunnelClient) Connect(ctx context.Context, opts ...grpc.CallOption) (GRPCTunnel_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCTunnel_ServiceDesc.Streams[0], "/grpc_tunnel.GRPCTunnel/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCTunnelConnectClient{stream}
	return x, nil
}

type GRPCTunnel_ConnectClient interface {
	Send(*Bytes) error
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type gRPCTunnelConnectClient struct {
	grpc.ClientStream
}

func (x *gRPCTunnelConnectClient) Send(m *Bytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCTunnelConnectClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCTunnelServer is the server API for GRPCTunnel service.
// All implementations must embed UnimplementedGRPCTunnelServer
// for forward compatibility
type GRPCTunnelServer interface {
	Connect(GRPCTunnel_ConnectServer) error
	mustEmbedUnimplementedGRPCTunnelServer()
}

// UnimplementedGRPCTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCTunnelServer struct {
}

func (UnimplementedGRPCTunnelServer) Connect(GRPCTunnel_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedGRPCTunnelServer) mustEmbedUnimplementedGRPCTunnelServer() {}

// UnsafeGRPCTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCTunnelServer will
// result in compilation errors.
type UnsafeGRPCTunnelServer interface {
	mustEmbedUnimplementedGRPCTunnelServer()
}

func RegisterGRPCTunnelServer(s grpc.ServiceRegistrar, srv GRPCTunnelServer) {
	s.RegisterService(&GRPCTunnel_ServiceDesc, srv)
}

func _GRPCTunnel_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCTunnelServer).Connect(&gRPCTunnelConnectServer{stream})
}

type GRPCTunnel_ConnectServer interface {
	Send(*Bytes) error
	Recv() (*Bytes, error)
	grpc.ServerStream
}

type gRPCTunnelConnectServer struct {
	grpc.ServerStream
}

func (x *gRPCTunnelConnectServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCTunnelConnectServer) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCTunnel_ServiceDesc is the grpc.ServiceDesc for GRPCTunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCTunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_tunnel.GRPCTunnel",
	HandlerType: (*GRPCTunnelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _GRPCTunnel_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/grpc_tunnel/grpc_tunnel.proto",
}
